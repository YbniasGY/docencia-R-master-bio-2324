mutate(peso = case_when(sexo == "M" ~ rnorm(n = n, mean = 3.266, sd = 0.514),
sexo == "F" ~ rnorm(n = n, mean = 3.155, sd = 0.495))) |>
ungroup()
? rnorm
datos |>
left_join(datos |> count(sexo), by = "sexo") |>
group_by(sexo) |>
mutate(peso = function(sexo, n) {
return(ifelse(sexo == "M",
rnorm(n = n, mean = 3.266, sd = 0.514),
rnorm(n = n, mean = 3.155, sd = 0.495))) },
sexo, n) |>
ungroup()
distrib_peso <- function(sexo, n) {
return(ifelse(sexo == "M",
rnorm(n = n, mean = 3.266, sd = 0.514),
rnorm(n = n, mean = 3.155, sd = 0.495)))
}
datos |>
left_join(datos |> count(sexo), by = "sexo") |>
group_by(sexo) |>
mutate(peso = distrib_peso(sexo, n)) |>
ungroup()
distrib_peso <- function(sexo, n) {
set.seed(20175)
return(ifelse(sexo == "M",
rnorm(n = n, mean = 3.266, sd = 0.514),
rnorm(n = n, mean = 3.155, sd = 0.495)))
}
datos |>
left_join(datos |> count(sexo), by = "sexo") |>
group_by(sexo) |>
mutate(peso = distrib_peso(sexo, n)) |>
ungroup()
distrib_peso <- function(sexo, n) {
set.seed(20175)
return(ifelse(sexo == "M",
rnorm(n = n, mean = 3.266, sd = 0.514),
rnorm(n = n, mean = 3.155, sd = 0.495)))
}
datos |>
left_join(datos |> count(sexo), by = "sexo") |>
group_by(sexo) |>
mutate(peso = distrib_peso(sexo, n)) |>
ungroup()
distrib_peso <- function(sexo, n) {
set.seed(20175)
return(ifelse(sexo == "M",
rnorm(n = n, mean = 3.266, sd = 0.514),
rnorm(n = n, mean = 3.155, sd = 0.495)))
}
datos |>
left_join(datos |> count(sexo), by = "sexo") |>
group_by(sexo) |>
mutate(peso = distrib_peso(sexo, n)) |>
ungroup()
distrib_peso <- function(sexo, n) {
set.seed(20175)
return(ifelse(sexo == "M",
rnorm(n = n, mean = 3.266, sd = 0.514),
rnorm(n = n, mean = 3.155, sd = 0.495)))
}
datos |>
left_join(datos |> count(sexo), by = "sexo") |>
group_by(sexo) |>
mutate(peso = distrib_peso(sexo, n)) |>
ungroup()
distrib_peso <- function(sexo, n) {
set.seed(20175)
return(ifelse(sexo == "M",
rnorm(n = n, mean = 3.266, sd = 0.514),
rnorm(n = n, mean = 3.155, sd = 0.495)))
}
datos |>
left_join(datos |> count(sexo), by = "sexo") |>
group_by(sexo) |>
mutate(peso = distrib_peso(sexo, n)) |>
ungroup()
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos <- tibble(sexo_unif = runif(n = 6),
sexo = ifelse(sexo_unif < 0.5, "M", "F"))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos <- tibble(sexo_unif = runif(n = 6),
sexo = ifelse(sexo_unif < 0.5, "M", "F"))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "M", rnorm(n = 1, mean = 3.266, sd = 0.514),
rnorm(n = 1, mean = 3.155, sd = 0.495)))
set.seed(20175)
datos <- tibble(sexo_unif = runif(n = 6),
sexo = ifelse(sexo_unif < 0.5, "M", "F"))
rnorm(n = 1, mean = 3.155, sd = 0.495)
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F", ,
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
set.seed(20175)
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
set.seed(20175)
datos <- tibble(sexo_unif = runif(n = 6),
sexo = ifelse(sexo_unif < 0.5, "M", "F"))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
set.seed(20175)
datos <- tibble(sexo_unif = runif(n = 6),
sexo = ifelse(sexo_unif < 0.5, "M", "F"))
datos |>
rowwise() |>
mutate(peso = if_else(sexo == "F",
rnorm(n = 1, mean = 3.155, sd = 0.495),
rnorm(n = 1, mean = 3.266, sd = 0.514)))
datos |>
mutate(peso = rnorm(n = 6, mean = if_else(sexo == "F", 3.155, 3.266),
sd =  if_else(sexo == "F", 0.495, 0.514)))
datos |>
mutate(peso = rnorm(n = 6, mean = if_else(sexo == "F", 3.155, 3.266),
sd =  if_else(sexo == "F", 0.495, 0.514)))
set.seed(20175)
datos <- tibble(sexo_unif = runif(n = 6),
sexo = ifelse(sexo_unif < 0.5, "M", "F"))
datos |>
mutate(peso = rnorm(n = 6, mean = if_else(sexo == "F", 3.155, 3.266),
sd =  if_else(sexo == "F", 0.495, 0.514)))
set.seed(20175)
datos <-
tibble(sexo_unif = runif(n = 6),
sexo = ifelse(sexo_unif < 0.5, "M", "F")) |>
mutate(peso = rnorm(n = 6, mean = if_else(sexo == "F", 3.155, 3.266),
sd = if_else(sexo == "F", 0.495, 0.514)))
datos
set.seed(20175)
datos <-
tibble(sexo_unif = runif(n = 6),
sexo = ifelse(sexo_unif < 0.5, "M", "F")) |>
mutate(peso = rnorm(n = 6, mean = if_else(sexo == "F", 3.155, 3.266),
sd = if_else(sexo == "F", 0.495, 0.514)))
datos
set.seed(20175)
datos <-
tibble(sexo_unif = runif(n = 20),
sexo = ifelse(sexo_unif < 0.5, "M", "F")) |>
mutate(peso = rnorm(n = 20, mean = if_else(sexo == "F", 3.155, 3.266),
sd = if_else(sexo == "F", 0.495, 0.514)))
# sexo
set.seed(20175)
sample <- 100
thres <- 0.5
datos <-
tibble(sexo_unif = runif(n = sample),
sexo = ifelse(sexo_unif < thres, "M", "F")) |>
mutate(peso = rnorm(n = sample, mean = if_else(sexo == "F", 3.155, 3.266),
sd = if_else(sexo == "F", 0.495, 0.514)))
datos
# sexo
set.seed(20175)
sample <- 100
thres <- 0.5
datos <-
tibble(sexo_unif = runif(n = sample),
sexo = ifelse(sexo_unif < thres, "M", "F")) |>
mutate(peso = rnorm(n = sample, mean = if_else(sexo == "F", 3.155, 3.266),
sd = if_else(sexo == "F", 0.495, 0.514)))
datos
ggplot(datos, aes(x = peso, y = sexo, color = sexo, fill = sexo)) +
geom_density()
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density()
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density(alpha = 0.5)
datos
sample <- 10000
thres <- 0.5
datos <-
tibble(sexo_unif = runif(n = sample),
sexo = ifelse(sexo_unif < thres, "M", "F")) |>
mutate(peso = rnorm(n = sample, mean = if_else(sexo == "F", 3.155, 3.266),
sd = if_else(sexo == "F", 0.495, 0.514)))
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density(alpha = 0.3) +
theme_minimal()
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density(alpha = 0.4) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind()
theme_minimal()
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind()
theme_minimal()
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme_minimal()
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_histogram(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme_minimal()
install.packages("ggridges")
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
ggridges::geom_density_ridges(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme_minimal()
ggplot(datos, aes(x = peso, y = sexo, color = sexo, fill = sexo)) +
ggridges::geom_density_ridges(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
theme_minimal()
ggplot(datos, aes(x = peso, y = sexo, color = sexo, fill = sexo)) +
geom_density(alpha = 0.25, ) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
facet_wrap(~sexo) +
theme_minimal()
ggplot(datos, aes(x = peso, y = sexo, color = sexo, fill = sexo)) +
geom_density(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
facet_wrap(~sexo) +
theme_minimal()
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
facet_wrap(~sexo) +
theme_minimal()
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
facet_wrap(sexo~) +
ggplot(datos, aes(x = peso, color = sexo, fill = sexo)) +
geom_density(alpha = 0.25) +
ggthemes::scale_color_colorblind() +
ggthemes::scale_fill_colorblind() +
facet_wrap(~sexo, ncol = 1) +
theme_minimal()
rbinom(n = 1, size = 6)
rbinom(n = 1, size = 6, prob = 0.5)
sample(c("M", "F"))
sample(c("M", "F"), size = 6)
sample(c("M", "F"), size = 6, replace = TRUE)
set.seed(20175)
set.seed(20175)
sample(c("M", "F"), size = 6, replace = TRUE)
set.seed(20175)
runif(n = 6)
sample(c("M", "F"), size = 6, replace = TRUE, prob = c(0.8, 0.2))
sample(c("M", "F"), size = 6, replace = TRUE, prob = c(0.8, 0.2))
sample()
sample
sample
sample()
? sample
sample()
sample
rm(smaple)
rm(sample)
sample
sample.int
sample()
sample
sample(c("11", "10", "01", "00"), size = 10, prob = c(0.02, 0.08, 0.1, 0.8))
sample(c("11", "10", "01", "00"), size = 10, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
sample(c("11", "10", "01", "00"), size = 10, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
sample(c("11", "10", "01", "00"), size = 10, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
sample(c("11", "10", "01", "00"), size = 10, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
sample(c("11", "10", "01", "00"), size = 10, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
sample(c("11", "10", "01", "00"), size = 10, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
sample(c("11", "10", "01", "00"), size = 10, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
c()
c(c(), 1)
A <- sample(c("11", "10", "01", "00"),
size = 1e6, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
Y <- c()
for (i in 1:1e6) {
U <- runif(n = 1)
Y <- c(Y, ifelse(U <= 0.02, "11",
ifelse(U <= 0.1, "10",
ifelse(U <= 0.2, "01", "00"))))
}
A <- sample(c("11", "10", "01", "00"),
size = 1e5, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
A <- sample(c("11", "10", "01", "00"),
size = 1e5, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
Y <- c()
for (i in 1:1e5) {
U <- runif(n = 1)
Y <- c(Y, ifelse(U <= 0.02, "11",
ifelse(U <= 0.1, "10",
ifelse(U <= 0.2, "01", "00"))))
}
table(A)
A |> count()
table(A)
table(Y)
tabulate(A)
table(A) / 1e5
table(Y) / 1e5
A <- sample(c("11", "10", "01", "00"),
size = 1e6, prob = c(0.02, 0.08, 0.1, 0.8), replace = TRUE)
Y <- c()
for (i in 1:1e6) {
U <- runif(n = 1)
Y <- c(Y, ifelse(U <= 0.02, "11",
ifelse(U <= 0.1, "10",
ifelse(U <= 0.2, "01", "00"))))
}
i
table(Y) / length(Y)
table(A) / length(A)
tibble(id = 1:10000,
unif = runif(10000),
estado = case_when(unif <= 0.02 ~ "11",
unif <= 0.1 ~ "10",
unif <= 0.2 ~ "01",
TRUE ~ "00"))
128 + 189
(128 + 189) / 2
? slice_sample()
? if_else
? ifelse
sum( c(0.5, 0.2, 0.1, 0.05, 0.05))
sum( c(0.6, 0.2, 0.1, 0.05, 0.05))
sum( c(0.5, 0.2, 0.1, 0.05, 0.05))
sum( c(0.5, 0.2, 0.1, 0.1, 0.05))
sum( c(0.5, 0.2, 0.1, 0.1, 0.05, 0.05))
(138 + 233 + 50)/2
(138 + 198 + 50)/2
(138 + 233 + 40)/2
(138 + 233 + 70)/2
(138 + 150 + 70)/2
(138 + 146 + 70)/2
#| eval: false
? airquality
```
class(Biostatistics::pinniped)
class(pinniped_tb)
class(pinniped)
Biostatistics::pinniped$Mate_type
who
library(tidyverse)
who
who[, -"iso2"]
who[, -iso2]
who[, iso2]
who[, "iso2"]
who[, -"iso2"]
who[, !"iso2"]
who$iso2 <- NULL
who
names(who)
who |>
pivot_longer(cols = "new_sep_m014":"newrel_f65",
names_to = "type", values_to = "cases")
who |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = "type", values_to = "cases")
who |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = "type", values_to = "cases", names_prefix = "new")
who |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = "type", values_to = "cases",
names_prefix = "new_",
sep = "_")
who |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = c("type", "sex-age"),
values_to = "cases",
names_prefix = "new_",
sep = "_")
who |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = c("type", "sex-age"),
values_to = "cases",
names_prefix = "new_",
names_sep = "_")
who
who |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = c("type", "sex-age"),
valuewho |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = c("type", "sex-age"),
values_to = "cases",
names_prefix = "new_",
names_sep = "_",
values_drop_na = TRUE)s_to = "cases",
who |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = c("type", "sex-age"),
values_to = "cases",
names_prefix = "new_",
names_sep = "_",
values_drop_na = TRUE)
who |>
pivot_longer(cols = "new_sp_m014":"newrel_f65",
names_to = c("type", "sex-age"),
values_to = "cases",
names_prefix = "new_",
names_sep = "_",
values_drop_na = TRUE) |>
separate(col = "sex-age", into = c("sex", "age"),
sep = 1)
datos <- read_csv(file = "./datos/breast-cancer-wisconsin-data.csv")
datos
sum(datos$diagnosis == "M") / nrow(datos)
sum(datos$diagnosis == "B") / nrow(datos)
mean_M <- mean(datos$radius_mean[datos$diagnosis == "M"], na.rm = TRUE)
mean_B <- mean(datos$radius_mean[datos$diagnosis == "B"], na.rm = TRUE)
t.test(mean_M, mean_B, conf.level = 0.95)
datos_M <- datos$radius_mean[datos$diagnosis == "M"]
datos_B <- datos$radius_mean[datos$diagnosis == "B"]
t.test(datos_M, datos_B, conf.level = 0.95)
Compliquemos un poco la función y añadamos en la salida los valores de cada lado, etiquetados como `lado_1` y `lado_2`, [**empaquetando la salida en una lista**.
