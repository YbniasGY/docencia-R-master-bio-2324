---
title: "Entrega I"
author: "C. Tangana - DNI: 00000000-X"
format:
  html:
    theme: [style.scss]
    toc: true
    toc-location: right
    toc-title: Índice
editor: visual
---

## Instrucciones (leer antes de empezar)

-   Modifica dentro del documento `.qmd` tus datos personales (nombre y DNI) ubicados en la cabecera del archivo.

-   Asegúrate, **ANTES de seguir editando** el documento, que el archivo `.qmd` se renderiza correctamente y se genera el `.html` correspondiente en tu carpeta local de tu ordenador.

-   Los chunks (cajas de código) creados están o vacíos o incompletos, de ahí que la mayoría tengan la opción `#| eval: false`. Una vez que edites lo que consideres, debes ir cambiando cada chunck a `#| eval: true` (o quitarlo directamente) para que se ejecuten.

-   Recuerda que puedes ejecutar chunk a chunk con el botón *play* o ejecutar todos los chunk hasta uno dado (con el botón a la izquierda del anterior).

### Paquetes necesarios

Necesitaremos los siguientes paquetes (haz play en el chunk para que se carguen):

```{r paquetes}
rm(list = ls()) # Borramos variables de environment

# descomentar si es la primera vez (y requieren instalación)
# install.packages("glue")
# install.packages("dplyr")
# install.packages("gapminder")
library(glue)
library(dplyr)
library(gapminder)
```

## Caso práctico I: análisis de Star Wars

El archivo de datos a usar lo cargaremos del paquete`{dplyr}`. En él tenemos diferentes variables de los **personajes de Star Wars**, con características de su pelo, piel, altura, nombre, etc.

```{r}
# no cambies código
starwars
```

### Ejercicio 1

> ¿Cuántos personajes hay guardados en la base de datos? ¿Cuántas características se han medido de cada uno? Extrae en dos variables distintas, nombres y estaturas, las variables correspondientes de la tabla. ¿De qué tipo es la variable nombre? ¿Y la variable estatura? Crea una tercera variable lógica que guarde si pesan más de 60 kg.

```{r}
# Una forma
dim(starwars)

# Otra forma
ncol(starwars)
nrow(starwars)

nombres <- starwars$nombre
estaturas <- starwars$height

class(nombres)
class(estaturas)

logica <- starwars$mass > 60
logica
```

La base de datos cuenta con `r ncol(starwars)` variables y `r nrow(starwars)` registros. La variable nombre es de tipo `r class(nombres)` y la variable estatura es de tipo `r class(estaturas)`

### Ejercicio 2

> Ordena la variable peso, primero de menor a mayor y luego al revés. Obtén el vector de nombres (ordenados de jóvenes a mayores)

```{r}
sort(starwars$mass) # menor a mayor
sort(starwars$mass, decreasing = TRUE) # mas a menos

nombres[order(starwars$birth_year)]
```

### Ejercicio 3

> Calcula la media y desviación típica de las variables de estatura y peso. Recuerda: cuidado con los ausentes. Define un vector con los nombres, pesos y estaturas de los personajes que tienen los ojos marrones (o contiene "marrón" en su color). Define un tibble con esas tres variables e incorpora una cuarta variable que se llame "IMC" que calcule el índice de masa corporal para ellos

```{r}
mean(starwars$height, na.rm = TRUE)
sd(starwars$height, na.rm = TRUE)

mean(starwars$mass, na.rm = TRUE)
sd(starwars$mass, na.rm = TRUE)

tibble("nombres" = starwars$name[stringr::str_detect(starwars$eye_color, "brown")],
       "pesos" = starwars$mass[stringr::str_detect(starwars$eye_color, "brown")],
       "estaturas" = starwars$height[stringr::str_detect(starwars$eye_color, "brown")],
       "IMC" = pesos / ((estaturas/100)^2))
```

## Caso práctico II: análisis de gapminder

El archivo de datos a usar lo cargaremos del paquete`{gapminder}`

```{r}
gapminder
```

En él tenemos diferentes **variables de económicas de distintos países en distintos años**.

### Ejercicio 1:

> Determina la dimensión de nuestros datos. ¿Cuántos registros tenemos? ¿Cuántas variables tenemos? ¿Cuántos países diferentes tenemos? (cuidado: aquí ya no tenemos un registro por país)

```{r}
dim(gapminder)
length(unique(gapminder$country)) # países diferentes
```

Tenemos `r length(unique(gapminder$country))` países diferentes.

### Ejercicio 2:

> Completa el código inferior y añade una nueva variable de texto llamada `id` que, para cada registro, una `pais-continente-año` (por ejemplo, "Afghanistan-Asia-1952").

```{r}
library(glue)
gapminder$id <- glue("{gapminder$country}-{gapminder$continent}-{gapminder$year}")
```

### Ejercicio 3:

> Determina el número de países que en 2002 tenían más de 40 millones de habitantes.

```{r}
gapminder$country[gapminder$year == 2002 & gapminder$pop > 40000000]


```

Había `r length(gapminder$country[gapminder$year == 2002 & gapminder$pop > 40000000])` países en 2002 con más de 40M de habitantes.

## Caso práctica III: análisis de datos covid

### Ejercicio 1

> Acude a la web <https://cnecovid.isciii.es/covid19/#documentaci%C3%B3n-y-datos> e importa el fichero `casos_hosp_uci_def_sexo_edad_provres.csv` a un tibble. Tienes la documentación de los datos en <https://cnecovid.isciii.es/covid19/resources/metadata_casos_hosp_uci_def_sexo_edad_provres.pdf>

```{r}
library(readr)
covid_bruto <- read_csv(file = "https://cnecovid.isciii.es/covid19/resources/casos_hosp_uci_def_sexo_edad_provres.csv")
```

### Ejercicio 2

> Detecta cómo están codificados los desconocidos/ausentes en la variable provincia (detecta antes como están codificados los ausentes en dicha variable). Tras ello completa el código inferior y calcula cuantos casos hay notificados para dicho valor desconocido de provincia.

```{r}
sum(covid_bruto$num_casos[covid_bruto$provincia_iso == "NC"], na.rm = TRUE)
```

Hay un total de `r sum(covid_bruto$num_casos[covid_bruto$provincia_iso == "NC"], na.rm = TRUE)`\` casos sin provincia asignada

### Ejercicio 3

> Carga el archivo `messy_covid_data.xlsx` y conviértelo a tidy data

```{r}
library(readxl)
messy_covid <- read_xlsx(path = "./messy_covid_data.xlsx")

library(tidyr)
messy_covid |>
  pivot_longer(cols = "0-9_H":"NC_NC",
               names_to = "edad_sexo",
               values_to = "casos") |>
  separate(col = "edad_sexo", into = c("edad", "sexo"),
           sep = "_")

messy_covid |>
  pivot_longer(cols = "0-9_H":"NC_NC",
               names_to = c("edad", "sexo"),
               values_to = "casos",
               names_sep = "_")
```
